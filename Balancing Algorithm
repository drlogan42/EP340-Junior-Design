//Included Libraries
#include <AccelStepper.h>
#include <InverseKinematics.h>
#include <MultiStepper.h>
#include <stdint.h>
#include <TouchScreen.h>
#include <math.h>

//Pins for TouchScreen
#define XP A1
#define XM A2
#define YP A3
#define YM A0

//Maps dimensions of 3RPS Parallel Manipulator to arms
Machine machine(2, 3.125, 1.75, 3.669291339); 

//Initalize TouchScreen
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 480);

//Stepper Motor Definitions (using TMC2208 step/dir drivers)
AccelStepper stepperA(AccelStepper::DRIVER, 2, 3);  // STEP, DIR
AccelStepper stepperB(AccelStepper::DRIVER, 4, 5);
AccelStepper stepperC(AccelStepper::DRIVER, 6, 7);

// Grouping for synchronized movement using MultiStepper
MultiStepper steppers;          

//Motion and Control Variables
long pos[3];   // Array to store the target positions for each stepper motor
int ENA = 0;   //Enable pin for drivers (LOW = enabled, HIGH = disabled)
double angOrig = 190;    //Inital angle of each leg (degrees)
double speed[3] = { 0, 0, 0 }, speedPrev[3], ks = 25;  //Speed of the stepper motor and multiplier constant

//Touch Screen X and Y offset for centering
double Xoffset = 500;  
double Yoffset = 500;  

//PID variables
double kp = 1E-7 , ki = 3E-4, kd = 150;

//PID for both axes
double error[2] = { 0, 0 }, errorPrev[2], integr[2] = { 0, 0 }, deriv[2] = { 0, 0 }, out[2];  //PID terms for X and Y directions
long timeI;                                                                           //variables to capture initial times

//More Platform Constants
double angToStep = 3200 / 360;  //Steps per degree (based on 3200 microsteps/rev)
bool detected = 0;              //Ball detection flag

void setup() {
  Serial.begin(115200);

  // Add stepper motors to multi-stepper controller
  steppers.addStepper(stepperA);
  steppers.addStepper(stepperB);
  steppers.addStepper(stepperC);

  // Setup driver enable pin
  pinMode(ENA, OUTPUT);           
  digitalWrite(ENA, HIGH);        //Motors off at startup
  delay(1000);                    //Pause to allow stabilization
  digitalWrite(ENA, LOW);         //Enable Motors
  moveTo(4.25, 0, 0);             //Moves platform to a "home" position 
  steppers.runSpeedToPosition();  // Blocking motion until it reaches target
}
void loop() {
  PID(0, 0);  // Run PID control loop targeting center of the screen
}

//Calculates the required angles for each motor and moves them accordingly
void moveTo(double hz, double nx, double ny) {
  //Is ball on platform?
  if (detected) {
    //If yes, calculate stepper motor position
    for (int i = 0; i < 3; i++) {
      pos[i] = round((angOrig - machine.theta(i, hz, nx, ny)) * angToStep);
    }

    //Apply calculated sppeds and accelerations
    stepperA.setMaxSpeed(speed[A]);
    stepperB.setMaxSpeed(speed[B]);
    stepperC.setMaxSpeed(speed[C]);

    //Acceleration is set to be proportional to speed
    stepperA.setAcceleration(speed[A] * 25);
    stepperB.setAcceleration(speed[B] * 25);
    stepperC.setAcceleration(speed[C] * 25);

    //Send movement commands
    stepperA.moveTo(pos[A]);
    stepperB.moveTo(pos[B]);
    stepperC.moveTo(pos[C]);
    
    //Run the stepper motors incrementally
    stepperA.run();
    stepperB.run();
    stepperC.run();
  }
  //If no, move to a level position at current z height
  else {
    for (int i = 0; i < 3; i++) {
      pos[i] = round((angOrig - machine.theta(i, hz, 0, 0)) * angToStep);
    }
    
    //Set max speed of motors
    stepperA.setMaxSpeed(800);
    stepperB.setMaxSpeed(800);
    stepperC.setMaxSpeed(800);

    //Sets position for all motors
    steppers.moveTo(pos);
    //Executes motion of all motors in sync incrementally
    steppers.run(); 
  }
}

//Runs PID control loop to calculate the desired tilt of the platform
//X and Y setpoint and position is input, output is movement
void PID(double setpointX, double setpointY) {
  //First, get X and Y positions from screen
  TSPoint p = ts.getPoint();
  //Is the ball detetced? (x position not zero)
  if (p.x != 0) {
    detected = 1;
    //Start calculating PID values
    for (int i = 0; i < 2; i++) {
      //Sets previous error
      errorPrev[i] = error[i];
      //Sets current error, in other words, the X and Y position error
      error[i] = (i == 0) * (Xoffset - p.x - setpointX) + (i == 1) * (Yoffset - p.y - setpointY);
      //Calculates the Integral of the error
      integr[i] += error[i] + errorPrev[i];
      //Calculates the Derivative of the error                                                        
      deriv[i] = error[i] - errorPrev[i];
      //Check if Derivative is real or infinity
      deriv[i] = isnan(deriv[i]) || isinf(deriv[i]) ? 0 : deriv[i];
      //Sets Output                                
      out[i] = kp * error[i] + ki * integr[i] + kd * deriv[i];
      //Contrains Output to have a magnitude of 0.25                                     
      out[i] = constrain(out[i], -0.25, 0.25);                                                     
    }
    //Calculate new speeds for each motor based on position error
    for (int i = 0; i < 3; i++) {
      //Sets previous speed
      speedPrev[i] = speed[i];
      //Sets current position                                                                                                           
      speed[i] = (i == A) * stepperA.currentPosition() + (i == B) * stepperB.currentPosition() + (i == C) * stepperC.currentPosition();  
      //Calculates error in current position and target position
      speed[i] = abs(speed[i] - pos[i]) * ks;                                                                                            
      //Filter speed by preventing it from being over 100 away from the last speed for smoothness
      speed[i] = constrain(speed[i], speedPrev[i] - 200, speedPrev[i] + 200);
      //Sonstrains speed from 0 to 1000                                                            
      speed[i] = constrain(speed[i], 0, 1000);                                       
    }
    //Printout the new X and Y outputs
    Serial.println((String) "X OUT = " + out[0] + "   Y OUT = " + out[1] + "   Speed A: " + speed[A]);  
  }
  //if the ball is not detected (the x value will be 0)
  else {
    //Confirmation ball is not there
    delay(10);
    //Double check ball is not on screen              
    TSPoint p = ts.getPoint();  
    //If ball is still not there
    if (p.x == 0) {             
      detected = 0;
    }
  }
  //Wait for ~20ms to maintain loop timing and overall stability
  timeI = millis();
  while (millis() - timeI < 20) {
    //Apply PID to move platform
    moveTo(4.25, -out[0], -out[1]);
  }
}
